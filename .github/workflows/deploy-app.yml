name: Deploy app

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_PATH: /var/www/sermadrid
      DATA_PATH: /var/www/sermadrid/backend/app/app/data
      BACKEND_CORS_ORIGINS: '${{ vars.BACKEND_CORS_ORIGINS }}'
      DOMAIN_NAME: '${{ vars.DOMAIN_NAME }}'
      AWS_DATA_PATH: data
      AWS_REGION: '${{ vars.AWS_REGION }}'
      AWS_S3_BUCKET_NAME: '${{ vars.AWS_S3_BUCKET_NAME }}'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Modify NGINX Configuration
      run: |
        sed -i "s/\${DOMAIN_NAME}/$DOMAIN_NAME/g" ./frontend/nginx/nginx.conf.template
        mv ./frontend/nginx/nginx.conf.template ./frontend/nginx/nginx.conf

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

    - name: Install Docker and Docker Compose
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DO_DROPLET_IP }}
        username: ${{ secrets.DO_DROPLET_USER }}
        key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        script: |
          set -e
          sudo apt update
          sudo apt upgrade -y
    
          # Install Docker
          if ! command -v docker &> /dev/null
          then
              echo "Docker is not installed. Installing Docker."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
          else
              echo "Docker is already installed."
          fi
    
          # Install Docker Compose
          if ! command -v docker-compose &> /dev/null
          then
              echo "Docker Compose is not installed. Installing Docker Compose."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
          else
              echo "Docker Compose is already installed."
          fi

    - name: Add SSH key to known hosts
      run: ssh-keyscan -H ${{ secrets.DO_DROPLET_IP }} >> ~/.ssh/known_hosts

    - name: Create remote directories
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DO_DROPLET_IP }}
        username: ${{ secrets.DO_DROPLET_USER }}
        key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        script: |
          mkdir -p ${{ env.APP_PATH }}
          mkdir -p ${{ env.DATA_PATH }}

    - name: Copy files to server
      run: scp -r ./* ${{ secrets.DO_DROPLET_USER }}@${{ secrets.DO_DROPLET_IP }}:${{ env.APP_PATH }}

    - name: Get latest workflow run ID
      id: get-run-id
      run: |
        WORKFLOW_ID=$(gh api \
          -H "Accept: application/vnd.github+json" \
          repos/${{ github.repository }}/actions/workflows/deploy-ml-infrastructure.yml \
          --jq '.id')
        RUN_ID=$(gh api \
          -H "Accept: application/vnd.github+json" \
          repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs \
          --jq '.workflow_runs[0].id')        
        echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}

    # - name: Download MLFlow URL artifact
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: mlflow-url
    #     github-token: ${{ secrets.GH_PAT }}
    #     run-id: ${{ steps.get-run-id.outputs.run_id }}

    # - name: Set MLFlow URL from artifact
    #   run: |
    #     MLFLOW_URL=$(cat mlflow-url.txt)
    #     echo "MLFLOW_URL=$MLFLOW_URL" >> $GITHUB_ENV

    - name: Export environment variables
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DO_DROPLET_IP }}
        username: ${{ secrets.DO_DROPLET_USER }}
        key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        script: |
          echo BACKEND_CORS_ORIGINS='${{ env.BACKEND_CORS_ORIGINS }}' > ${{ env.APP_PATH }}/.env
          echo DOMAIN_NAME=${{ env.DOMAIN_NAME }} >> ${{ env.APP_PATH }}/.env
          echo MAPBOX_TOKEN=${{ secrets.MAPBOX_TOKEN }} >> ${{ env.APP_PATH }}/.env
          echo CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }} >> ${{ env.APP_PATH }}/.env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> ${{ env.APP_PATH }}/.env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> ${{ env.APP_PATH }}/.env
          echo AWS_REGION=${{ env.AWS_REGION }} >> ${{ env.APP_PATH }}/.env

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download and copy data from S3
      run: |
        aws s3 sync s3://${{ env.AWS_S3_BUCKET_NAME }}/${{ env.AWS_DATA_PATH }} ${{ runner.temp }}/${{ env.AWS_DATA_PATH }}
        scp -r ${{ runner.temp }}/${{ env.AWS_DATA_PATH }}/* ${{ secrets.DO_DROPLET_USER }}@${{ secrets.DO_DROPLET_IP }}:${{ env.DATA_PATH }}

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DO_DROPLET_IP }}
        username: ${{ secrets.DO_DROPLET_USER }}
        key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        script: |
          set -e
          cd ${{ env.APP_PATH }}
          docker-compose down --remove-orphans
          docker-compose -f docker-compose.yml up -d --build
